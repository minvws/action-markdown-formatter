name: Format Markdown
description: Automatically format changed markdown files in pull requests using Prettier.

inputs:
  github_token:
    description: "GitHub token for pushing changes"
    required: true

runs:
  using: "composite"
  steps:
    - name: Exit if not a pull request
      shell: bash
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        echo "This action only runs on pull request events. Exiting."

    - name: Checkout code
      if: ${{ github.event_name == 'pull_request' }}
      uses: actions/checkout@v5
      with:
        ref: ${{ github.head_ref }}

    - name: Set up Node.js
      if: ${{ github.event_name == 'pull_request' }}
      uses: actions/setup-node@v6
      with:
        node-version: "22"

    - name: Get changed markdown files in the PR
      if: ${{ github.event_name == 'pull_request' }}
      id: changed-markdown-files
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }}
      run: |
        md_files=$(gh pr diff ${{ github.event.pull_request.number }} --name-only | grep '\.md$' | while read -r file; do [ -f "$file" ] && echo "$file"; done | sed 's/.*/"&"/' | tr '\n' ' ' | sed 's/ $//' || true)
        echo "files=${md_files}" >> $GITHUB_OUTPUT

    - name: Format changed markdown files with Prettier
      if: ${{ github.event_name == 'pull_request' && steps.changed-markdown-files.outputs.files != '' }}
      shell: bash
      run: npx prettier --write ${{ steps.changed-markdown-files.outputs.files }}

    # Use the REST API to commit changes, so we get automatic commit signing
    - name: Commit and push changes
      if: ${{ github.event_name == 'pull_request' && steps.changed-markdown-files.outputs.files != '' }}
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }}
        GH_REPO: ${{ github.repository }}
      run: |
        # Github api only allows commits of one file at a time
        BRANCH_NAME="${{ github.head_ref }}"
        echo "Branch name: $BRANCH_NAME"
        echo "Processing modified files..."
        while IFS= read -r -d '' FILE; do
          FILENAME=$(basename "$FILE")
          echo "Processing file: $FILENAME"
          CONTENT=$(base64 -i -w 0 "$FILE")
          SHA=$(git rev-parse HEAD:"$FILE" 2>&1)
          if [ $? -ne 0 ]; then
            echo "Failed to get SHA for $FILE:"
            echo "$SHA"
            exit 1
          fi
          echo "SHA of file: $SHA"
          API_RESPONSE=$(gh api --method PUT /repos/:owner/:repo/contents/"$FILE" \
            --field message="chore(markdown): auto-fix markdown lint issues for $FILENAME" \
            --field content="$CONTENT" \
            --field branch="$BRANCH_NAME" \
            --field sha="$SHA" 2>&1)
          if [ $? -ne 0 ]; then
            echo "Failed to commit change for $FILE:"
            echo "$API_RESPONSE"
            exit 1
          fi
          echo "Successfully committed change for $FILE"
        done < <(git ls-files -m -z)
